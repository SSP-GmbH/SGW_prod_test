<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{cf7a1f3b-01b2-485c-af22-ebbbf99dfab4}" SpecialFunc="None">
    <Declaration><![CDATA[(* POUs/MAIN *)

PROGRAM MAIN
VAR
	CanRx          : CAN_IFACE_QUEUE;
	CanTx          : CAN_IFACE_QUEUE;
	i              : UINT;
	relayIdx       : UINT;
	slotIn         : CAN_MsgSlot;
	slotOut        : CAN_MsgSlot;
	msgIn          : CAN_MSG;
	msgOut         : CAN_MSG;

	rawVoltIn      : UINT := 0;
	rawVoltOut     : UINT := 0;
	rawCurrentIn   : UINT := 0;
	rawCurrentOut  : UINT := 0;

	physVoltIn     : REAL := 0.0;
	physVoltOut    : REAL := 0.0;
	physCurrentIn  : REAL := 0.0;
	physCurrentOut : REAL := 0.0;

	FB_PSU         : FB_PowerSupply;
	
	feedbackTmr    : TON;    // On-delay timer for periodic feedback
	feedbackReq    : BOOL;   // Pulses TRUE once every 100 ms when Q rises

	ALGO_RUN       : BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
FB_PSU.Cycle();



IF ALGO_RUN THEN

	feedbackTmr(IN := TRUE, PT := T#100MS);  
	feedbackReq := feedbackTmr.Q;  
	IF feedbackReq THEN  
	  feedbackTmr(IN := FALSE);  
	END_IF  

	// When timer fires, send voltage and current feedback
	IF feedbackReq THEN

		GLOBAL_VARS.DO_EL2008_RELAY_0 := ANALOG.AL_2 <= 20000;
		GLOBAL_VARS.DO_EL2008_RELAY_1 := ANALOG.AL_2 > 20000;

		// Read latest physical values
		physVoltIn := FB_PSU.GetVoltage();
		rawVoltIn := VoltageToRaw(volts := physVoltIn);
		physCurrentIn := FB_PSU.GetCurrent();
		rawCurrentIn := CurrentToRaw(amps := physCurrentIn);

		// Read back voltage and compose 0x201
		msgOut.ID  := 16#201;
		msgOut.DLC := 2;
		msgOut.DATA[1] := TO_BYTE(SHR(rawVoltIn, 8));   // MSB
		msgOut.DATA[0] := TO_BYTE(rawVoltIn AND 16#FF); // LSB
		slotOut := F_ComposeSlot(msg := msgOut);
		CanTx.Messages[0] := slotOut;

		// Read back current and compose 0x301
		msgOut.ID  := 16#301;
		msgOut.DLC := 2;
		msgOut.DATA[1] := TO_BYTE(SHR(rawCurrentIn, 8));
		msgOut.DATA[0] := TO_BYTE(rawCurrentIn AND 16#FF);
		slotOut := F_ComposeSlot(msg := msgOut);
		CanTx.Messages[1] := slotOut;

		// Finalize and trigger EtherCAT send
		CanTx.NoOfMessages := 2;
		CanTx.TxCounter    := EL6751_GVLs.gCanIf_TxMsg.TxCounter + 1;
		EL6751_GVLs.gCanIf_TxMsg := CanTx;
	END_IF


	CanRx := EL6751_GVLs.gCanIf_RxMsg; // Create a copy of the hardware mapped CAN Rx Queue
	// Process all received messages
	IF CanRx.NoOfMessages > 0 THEN
		FOR i := 0 TO CanRx.NoOfMessages - 1 DO
			slotIn := CanRx.Messages[i];
			msgIn := F_ParseSlot(slot := slotIn);
	
			// Handle by CAN ID
			CASE msgIn.ID OF
	
			16#100:  // Relay control
				IF msgIn.DLC = 8 THEN
					// GLOBAL_VARS.DO_EL2008_RELAY_0 := msgIn.DATA[0] = 1;
					// GLOBAL_VARS.DO_EL2008_RELAY_1 := msgIn.DATA[1] = 1;
				END_IF;

			16#200:  // Voltage control
				IF msgIn.DLC = 2 THEN
					rawVoltOut := BytesToUInt16(highByte := msgIn.DATA[1], lowByte := msgIn.DATA[0]);
					physVoltOut := RawToVoltage(raw := rawVoltOut);
					FB_PSU.SetVoltage(volts := physVoltOut);
				END_IF;

			16#300:  // Current control
				IF msgIn.DLC = 2 THEN
					rawCurrentOut := SHL(TO_UINT(msgIn.DATA[1]), 8) OR TO_UINT(msgIn.DATA[0]);
					physCurrentOut := RawToCurrent(raw := rawCurrentOut);
					FB_PSU.SetCurrent(amps := physCurrentOut);
				END_IF;

			END_CASE;
		END_FOR
	END_IF
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>