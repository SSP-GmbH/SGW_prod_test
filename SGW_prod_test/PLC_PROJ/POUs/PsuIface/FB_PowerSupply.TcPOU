<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PowerSupply" Id="{f3e68b85-65b6-4432-9207-06eca8c7a1d9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PowerSupply
VAR
	pComIn     : POINTER TO BYTE;
	SizeComIn  : UDINT;
	pComOut    : POINTER TO BYTE;
	SizeComOut : UDINT;

	fbPort   : SerialLineControl;  // call every scan
	fbSend   : SendString;
	fbRecv   : ReceiveString;

	_bufTx   : ComBuffer;          // your existing TxBuf
	_bufRx   : ComBuffer;          // your existing RxBuf

	_txErr   : ComError_t;
	_rxErr   : ComError_t;
	_txBusy  : BOOL;
	_rxBusy  : BOOL;
	_Recvd   : BOOL;

	trigRecvReset : R_TRIG;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{9b6479ca-14f4-4e4a-aad1-b730b0393e2f}">
      <Declaration><![CDATA[METHOD Cycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT fbPort.initialized THEN
  	_bufTx.RdIdx    := 0;
	_bufTx.WrIdx    := 0;
	_bufTx.Count    := 0;
	_bufTx.FreeByte := SIZEOF(_bufTx.Buffer);
	_bufTx.Error    := 0;
	_bufTx.blocked  := FALSE;

	_bufRx.RdIdx    := 0;
	_bufRx.WrIdx    := 0;
	_bufRx.Count    := 0;
	_bufRx.FreeByte := SIZEOF(_bufRx.Buffer);
	_bufRx.Error    := 0;
	_bufRx.blocked  := FALSE;
END_IF

fbPort(
    Mode      := SERIALLINEMODE_DEFAULT,
    pComIn    := ADR(GLOBAL_VARS.X003_In),
    pComOut   := ADR(GLOBAL_VARS.X003_Out),
    SizeComIn := SIZEOF(GLOBAL_VARS.X003_In),
    TxBuffer  := _bufTx,
    RxBuffer  := _bufRx
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCurrent" Id="{3c0f19b5-476c-46aa-8d4c-37fda8b65d44}">
      <Declaration><![CDATA[METHOD GetCurrent : REAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetVoltage" Id="{5cbe3dd5-384a-4941-8c1b-2d53f1e3ea31}">
      <Declaration><![CDATA[METHOD GetVoltage : REAL
VAR
	temp_str : STRING(80);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Cycle();

// 1) Send the command
fbSend(
	SendString := CONCAT('VSET1?', CHR(10)),
	TxBuffer   := _bufTx,
	Busy       => _txBusy
);

// 2) Detect the instant that Busy goes TRUE → FALSE
trigRecvReset(CLK := _txBusy);

// 3) Call fbRecv _every_ scan, but only reset it on that one‐scan pulse
fbRecv(
	Reset          := trigRecvReset.Q,  // TRUE _only_ the scan after sendDone
	Suffix         := CHR(10),
	Timeout        := T#0ms,
	RxBuffer       := _bufRx,
	ReceivedString := temp_str,
	StringReceived => _Recvd,
	busy           => ,
	Error          => _rxErr
);

// 4) Now you’ll see isRecv = TRUE when the LF arrives
IF (_rxErr = COMERROR_NOERROR) AND _Recvd THEN
	GetVoltage := STRING_TO_REAL(temp_str);
ELSE
	GetVoltage := -1.0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetCurrent" Id="{92d298c1-4504-41de-9c93-8ab098dc5841}">
      <Declaration><![CDATA[METHOD SetCurrent
VAR_INPUT
	amps : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetVoltage" Id="{c6b04aa2-4d3e-4b68-8450-de860b530b4f}">
      <Declaration><![CDATA[METHOD SetVoltage

VAR_INPUT
	volts : REAL;
END_VAR

VAR
	raw    : UINT;
	hiPart : UINT;
	loPart : UINT;  
  	loStr  : STRING(3);
	hiStr  : STRING(3);
	txStr  : STRING(20);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
raw := VoltageToRaw(volts);

// build “VSET1:xx.yy”  
hiPart := raw / 100;         // integral volts  
loPart := raw MOD 100;       // hundredths  
loStr  := UINT_TO_STRING(loPart);  
IF loPart < 10 THEN  
	loStr := CONCAT('0', loStr);  
END_IF;  
hiStr  := UINT_TO_STRING(hiPart);  

txStr := CONCAT(CONCAT('VSET1:', CONCAT(hiStr, CONCAT('.', loStr))), CHR(10));  

fbSend(
	SendString := txStr,
	TxBuffer   := _bufTx,
	Error      => _txErr
);
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>